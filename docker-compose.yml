version: '3.8'

services:
  # =============================================================================
  # Node.js Backend Service
  # =============================================================================
  coreza-backend-node:
    build:
      context: .
      dockerfile: coreza-backend-node/Dockerfile
      target: production
    container_name: coreza-backend-node
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "8080:8080"  # WebSocket port
    environment:
      - NODE_ENV=production
      - PORT=8000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DATABASE_URL=${DATABASE_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - coreza-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # =============================================================================
  # Redis Service for Queues
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: coreza-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-defaultpassword}
    volumes:
      - redis-data:/data
    networks:
      - coreza-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # =============================================================================
  # Development Services (only for development)
  # =============================================================================
  coreza-backend-node-dev:
    build:
      context: .
      dockerfile: coreza-backend-node/Dockerfile
      target: development
    container_name: coreza-backend-node-dev
    ports:
      - "8000:8000"
      - "9229:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - REDIS_HOST=redis
    depends_on:
      - redis
    networks:
      - coreza-network
    volumes:
      - ./coreza-backend-node/src:/app/coreza-backend-node/src
      - /app/coreza-backend-node/node_modules
    profiles:
      - development

  # =============================================================================
  # Monitoring Services
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: coreza-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - coreza-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: coreza-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - coreza-network
    profiles:
      - monitoring

  # =============================================================================
  # Load Balancer (NGINX)
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: coreza-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - coreza-backend-node
    networks:
      - coreza-network
    profiles:
      - production

  # =============================================================================
  # Original Python Backend (for comparison testing)
  # =============================================================================
  backend:
    build: ./coreza-backend
    command: uvicorn main:app --host 0.0.0.0 --port 3000 --reload
    volumes:
      - ./coreza-backend:/app
    env_file:
      - ./coreza-backend/.env
    ports:
      - "3000:3000"
    depends_on:
      - redis
    networks:
      - coreza-network
    profiles:
      - python-backend

  celery-worker:
    build: ./coreza-backend
    command: celery -A scheduler.services.queue.celery_app worker --loglevel=info --pool=solo
    volumes:
      - ./coreza-backend:/app
    env_file:
      - ./coreza-backend/.env
    depends_on:
      - redis
      - backend
    networks:
      - coreza-network
    profiles:
      - python-backend

  frontend:
    build: .
    command: npm run dev -- --host 0.0.0.0 --port 5173
    volumes:
      - .:/app
      - /app/node_modules
    env_file:
      - ./.env
    ports:
      - "5173:5173"
    depends_on:
      - coreza-backend-node
    networks:
      - coreza-network

# =============================================================================
# Networks and Volumes
# =============================================================================
networks:
  coreza-network:
    driver: bridge

volumes:
  redis-data:
  prometheus-data:
  grafana-data:
